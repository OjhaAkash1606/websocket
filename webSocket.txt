Describe the meaning of Protocol?
    Protocol is a "set of rules" which is used in digital information to connect devices and exchange data between them.

Types of Protocol
    TCP -  Transmision control Protocol.
           It is used to transfer the data over the internet. it divides the data in small packet and sends it to the destination through the network.

    IP -   Internet Protocol
           While IP is used for identify devices where we want to send data.

    FTP -  File transfer protocol
           
    HTTP - Hyper text transfer protocol
           HTTP is used to establish a connection with the server and send html pages back to the user's browser(client).
           
    HTTPs - Hyper text transfer protocol secure
    POP -  Post office protocol
    UDP -  User Datagram protocol
    SMTP - Simple mail transfer protocol
    IMAP - Internet message Access protocol






-websocket client application uses the "websocket api" to communicate with the "websocket server" using "websocket protocol".


-There are four main WebSocket API events −
    
    -Open
        -Once the connection has been established between the client and the server, the open event is fired from Web Socket instance. It is called as the initial handshake between client and server.
        -The event, which is raised once the connection is established, is called onopen.

    -Message
        -Message event happens usually when the server sends some data to the client that data can be plain text or binary or images etc.
        -Whenever the data is sent from server to client, the onmessage function is fired.

    -Close
        -Closing the connection is possible with the help of onclose event. After marking the end of communication with the help of onclose event, no messages can be further transferred between the server and the client.
        -Closing the event can happen due to poor connectivity as well.

    -Error
        -Error marks for some mistake, which happens during the communication.
        -It is marked with the help of onerror event.
        -Onerror is always followed by termination of connection.


Web Sockets – Actions

    -send()
        -This action is usually preferred for some communication with the server, which includes sending messages, which includes text files, binary data or images.
        -socket.send(para1.para2,para3)
            para1 takes the data any type of data. {The data to send.}
            para2 takes some boolean value. {Object}
            para3 takes a callback function. (An optional callback which is invoked when data is written out. If an error occurs, the callback is called with the error as its first argument.).

    -close()
        -This method stands for goodbye handshake. It terminates the connection completely and no data can be transferred until the connection is re-established.
        -socket.close()


-

-It is necessary to initialize the connection to the server from client for communication between them.

-For initializing the connection, creation of Javascript object with the URL with the remote or local server is required.

Like this
var socket = new WebSocket(“ ws://echo.websocket.org ”);



headers event : 
                        Emitted before the response headers are written to the socket as part of the handshake. This allows you to inspect/modify the headers before they are sent.

                        websocket.on("headers",(para1,para2)=>{
                         -para1 takes some properties as an array
                         -para2 takes some information
                         })

connection event :      
                        Emitted when the handshake is complete. request is the http GET request sent by the client. Useful for parsing authority headers, cookie headers, and other information.

                        websocket.on("connection",(para1,para2)=>{
                            para1 takes websocket
                            para2 takes get request from client side. 
                        })

                        
Note : onopen api send msg from client received at connection event at server 


why we use socket.io instead of websocket.

reconnect
binary
multi-room
blocker

    











    socket.io